import pytest
import time
import os
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# Directory for saving screenshots
SCREENSHOT_DIR = "screenshots"
os.makedirs(SCREENSHOT_DIR, exist_ok=True)

@pytest.fixture(scope="session")
def driver():
    """Initializes the WebDriver and ensures it runs only once"""
    driver = webdriver.Chrome()
    yield driver
    driver.quit()

def take_screenshot(driver, name):
    """Saves a screenshot to the screenshots folder"""
    filepath = os.path.join(SCREENSHOT_DIR, f"{name}.png")
    driver.save_screenshot(filepath)
    print(f"Screenshot ulo≈æen: {filepath}")

def test_add_product_to_cart(driver):
    """Test searching for 'Stylish Dress', adding it to cart, and verifying its presence in the cart."""
    wait = WebDriverWait(driver, 15)

    print("Before opening the page")
    driver.get("https://automationexercise.com/products")
    print("Page opened:", driver.current_url)
    take_screenshot(driver, "01_opened_page")

    # Clicking the consent button (if it exists)
    try:
        consent_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@aria-label='Souhlas']")))
        consent_button.click()
        take_screenshot(driver, "02_consent_clicked")
    except:
        print("Consent not found.")

    # Searching for the product "Stylish Dress"
    search_box = wait.until(EC.presence_of_element_located((By.ID, "search_product")))
    search_box.send_keys("Stylish Dress")
    search_box.send_keys(Keys.RETURN)
    take_screenshot(driver, "03_search_results")

    # Wait for search results to load
    try:
        product = wait.until(EC.element_to_be_clickable((By.XPATH, "//p[contains(text(), 'Stylish Dress')]/following-sibling::a[contains(@class, 'add-to-cart')]")))
        product.click()
        print("Clicked on 'Add to Cart'")
        take_screenshot(driver, "04_product_added")

        # Handle possible modal
        try:
            modal_close = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[contains(text(),'Continue Shopping')]")))
            modal_close.click()
            print("Closed modal window")
        except:
            print("No modal appeared")
    except:
        print("Product not found or unable to add to cart.")
        take_screenshot(driver, "error_product_not_added")
        assert False, "Product not found or unable to add to cart."

    # Checking if product is in cart
    driver.get("https://automationexercise.com/view_cart")
    time.sleep(3)
    take_screenshot(driver, "05_cart_page")

    try:
        wait.until(EC.presence_of_element_located((By.XPATH, "//table[@id='cart_info_table']")))
        cart_items = driver.find_elements(By.XPATH, "//table[@id='cart_info_table']//td[@class='cart_description']//a")

        product_found = False
        for item in cart_items:
            if "Stylish Dress" in item.text:
                product_found = True
                break

        assert product_found, "Product not found in cart!"
        print("Product successfully added to cart.")
        take_screenshot(driver, "06_product_in_cart")
    except:
        print("Product not found in cart. Debugging info saved.")
        take_screenshot(driver, "error_product_not_in_cart")
        assert False, "Product not found in cart."
